rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to get user role
    function getUserRole(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data.role;
    }
    
    // Helper function to check if user has specific role
    function hasRole(role) {
      return request.auth != null && getUserRole(request.auth.uid) == role;
    }
    
    // Helper function to check if user is order creator
    function isOrderCreator(orderData) {
      return request.auth != null && orderData.createdBy == request.auth.uid;
    }
    
    // Users collection - users can only access their own profile
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false; // Prevent user deletion
    }
    
    // Orders collection - role-based access
    match /orders/{orderId} {
      allow read: if request.auth != null;
      
      // Only Rouiba users can create orders
      allow create: if hasRole('rouiba') && 
        request.resource.data.createdBy == request.auth.uid;
      
      // Role-based update permissions
      allow update: if request.auth != null && (
        // Rouiba can update their own orders if status is pending
        (hasRole('rouiba') && isOrderCreator(resource.data) && resource.data.status == 'pending') ||
        // Meftah can update order status to accepted/rejected
        (hasRole('meftah') && 
         (request.resource.data.status == 'accepted' || request.resource.data.status == 'rejected')) ||
        // Hangar can update production status
        (hasRole('hangar') && 
         (request.resource.data.status == 'en_cours' || 
          request.resource.data.status == 'fini' || 
          request.resource.data.status == 'charge'))
      );
      
      // Only Rouiba can delete their own pending orders
      allow delete: if hasRole('rouiba') && 
        isOrderCreator(resource.data) && 
        resource.data.status == 'pending';
    }
    
    // Counters collection - for order numbering
    match /counters/{counterId} {
      allow read, write: if request.auth != null;
    }
    
    // Notifications collection - users can read all, create system notifications
    match /notifications/{notificationId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null; // System notifications
      allow update: if request.auth != null && 
        request.auth.uid in request.resource.data.readBy;
      allow delete: if request.auth != null;
    }
  }
}